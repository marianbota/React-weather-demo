{"ast":null,"code":"var _jsxFileName = \"C:\\\\Workspace\\\\HelloReact\\\\React-weather-demo\\\\weather\\\\src\\\\components\\\\WeatherScreen.js\",\n    _s = $RefreshSig$();\n\nimport WeatherService from \"../services/OpenWeatherMapService\";\nimport Forecast from \"../models/Forecast\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction WeatherScreen() {\n  _s();\n\n  useEffect(() => {\n    //NOTE this effect is executed on page load\n    updateForecast();\n  }, //NOTE the square brackets indicate that the efect function will be called only once when the component is mounted\n  []);\n  let [state, setState] = useState({\n    forecastData: new Forecast(),\n    cityName: 'Sibiu'\n  });\n\n  function updateForecast() {\n    //NOTE city name should be taken as a ui input\n    WeatherService.GetForecast(state.cityName).then(result => {\n      let forecast = new Forecast(result);\n      setState({ ...state,\n        forecastData: forecast\n      });\n    }).then(cast => console.dir(cast)).catch(error => console.error(error));\n  }\n\n  function updateCity(newValue) {\n    console.log(newValue);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Weather report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: state.forecastData.city,\n      onBlur: updateCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: updateForecast,\n      children: \"Update\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [state.forecastData.country, \" \", state.forecastData.city, \" \", state.forecastData.condition]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Min: \", state.forecastData.min]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Max: \", state.forecastData.max]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Feels like: \", state.forecastData.feel]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Wind speed: \", state.forecastData.windSpeed]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Visibility: \", state.forecastData.visibility]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n} //NOTE don't forget to export the function component so it can be imported in another file\n\n\n_s(WeatherScreen, \"7UiQhHqRtKyQ5QUBzBAoDIb5opg=\");\n\n_c = WeatherScreen;\nexport default WeatherScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherScreen\");","map":{"version":3,"sources":["C:/Workspace/HelloReact/React-weather-demo/weather/src/components/WeatherScreen.js"],"names":["WeatherService","Forecast","useState","useEffect","WeatherScreen","updateForecast","state","setState","forecastData","cityName","GetForecast","then","result","forecast","cast","console","dir","catch","error","updateCity","newValue","log","city","country","condition","min","max","feel","windSpeed","visibility"],"mappings":";;;AAAA,OAAOA,cAAP,MAA2B,mCAA3B;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;;AAEA,SAASC,aAAT,GAAyB;AAAA;;AACrBD,EAAAA,SAAS,CAAC,MAAI;AACV;AACAE,IAAAA,cAAc;AACjB,GAHQ,EAIT;AACA,IALS,CAAT;AAOA,MAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC;AAC7BM,IAAAA,YAAY,EAAE,IAAIP,QAAJ,EADe;AAE7BQ,IAAAA,QAAQ,EAAE;AAFmB,GAAD,CAAhC;;AAKA,WAASJ,cAAT,GAA0B;AACtB;AACAL,IAAAA,cAAc,CAACU,WAAf,CAA2BJ,KAAK,CAACG,QAAjC,EACKE,IADL,CACWC,MAAM,IAAI;AACb,UAAIC,QAAQ,GAAG,IAAIZ,QAAJ,CAAaW,MAAb,CAAf;AACAL,MAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWE,QAAAA,YAAY,EAAEK;AAAzB,OAAD,CAAR;AACH,KAJL,EAKKF,IALL,CAKWG,IAAI,IAAIC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CALnB,EAMKG,KANL,CAMYC,KAAK,IAAIH,OAAO,CAACG,KAAR,CAAcA,KAAd,CANrB;AAOH;;AAED,WAASC,UAAT,CAAoBC,QAApB,EAA8B;AAC1BL,IAAAA,OAAO,CAACM,GAAR,CAAYD,QAAZ;AACH;;AAED,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,KAAK,EAAEd,KAAK,CAACE,YAAN,CAAmBc,IAAjC;AAAuC,MAAA,MAAM,EAAEH;AAA/C;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAQ,MAAA,OAAO,EAAEd,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAA,iBAAIC,KAAK,CAACE,YAAN,CAAmBe,OAAvB,OAAiCjB,KAAK,CAACE,YAAN,CAAmBc,IAApD,OAA2DhB,KAAK,CAACE,YAAN,CAAmBgB,SAA9E;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAA,0BAASlB,KAAK,CAACE,YAAN,CAAmBiB,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI;AAAA,0BAASnB,KAAK,CAACE,YAAN,CAAmBkB,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eAOI;AAAA,iCAAgBpB,KAAK,CAACE,YAAN,CAAmBmB,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,eAQI;AAAA,iCAAgBrB,KAAK,CAACE,YAAN,CAAmBoB,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,eASI;AAAA,iCAAgBtB,KAAK,CAACE,YAAN,CAAmBqB,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA,kBADJ;AAaH,C,CAED;;;GA3CSzB,a;;KAAAA,a;AA4CT,eAAeA,aAAf","sourcesContent":["import WeatherService from \"../services/OpenWeatherMapService\";\r\nimport Forecast from \"../models/Forecast\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction WeatherScreen() {\r\n    useEffect(()=>{\r\n        //NOTE this effect is executed on page load\r\n        updateForecast();\r\n    }, \r\n    //NOTE the square brackets indicate that the efect function will be called only once when the component is mounted\r\n    [])\r\n\r\n    let [state, setState] = useState({\r\n        forecastData: new Forecast(),\r\n        cityName: 'Sibiu'\r\n    });\r\n\r\n    function updateForecast() {\r\n        //NOTE city name should be taken as a ui input\r\n        WeatherService.GetForecast(state.cityName)\r\n            .then( result => {\r\n                let forecast = new Forecast(result)\r\n                setState({...state, forecastData: forecast})\r\n            })\r\n            .then( cast => console.dir(cast))\r\n            .catch( error => console.error(error) );            \r\n    }\r\n\r\n    function updateCity(newValue) {\r\n        console.log(newValue)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3>Weather report</h3>\r\n            <input value={state.forecastData.city} onBlur={updateCity}/>\r\n            <button onClick={updateForecast}>Update</button>\r\n            <p>{state.forecastData.country} {state.forecastData.city} {state.forecastData.condition}</p>\r\n            <p>Min: {state.forecastData.min}</p>\r\n            <p>Max: {state.forecastData.max}</p>\r\n            <p>Feels like: {state.forecastData.feel}</p>\r\n            <p>Wind speed: {state.forecastData.windSpeed}</p>\r\n            <p>Visibility: {state.forecastData.visibility}</p>\r\n        </>\r\n    );\r\n}\r\n\r\n//NOTE don't forget to export the function component so it can be imported in another file\r\nexport default WeatherScreen;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}