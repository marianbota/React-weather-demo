{"ast":null,"code":"var _jsxFileName = \"C:\\\\Workspace\\\\HelloReact\\\\React-weather-demo\\\\weather\\\\src\\\\components\\\\WeatherScreen.js\",\n    _s = $RefreshSig$();\n\nimport WeatherService from \"../services/OpenWeatherMapService\";\nimport Forecast from \"../models/Forecast\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction WeatherScreen() {\n  _s();\n\n  let initialCity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Sibiu\";\n  useEffect(() => {\n    //NOTE this effect is executed on page load\n    updateForecast();\n  }); //NOTE forecastData is a state\n  //NOTE setForecastData is a state upade function\n\n  let [forecastData, setForecastData] = useState({});\n  let [cityName, setCityName] = useState(initialCity);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Weather report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: updateForecast,\n      children: \"Update\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [forecastData.country, \" \", forecastData.city]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: forecastData.condition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Min: \", forecastData.min]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Max: \", forecastData.max]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Feels like: \", forecastData.feel]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Wind speed: \", forecastData.windSpeed]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Visibility: \", forecastData.visibility]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(WeatherScreen, \"fppI65d53Arq7NhYvQcuOLIP0To=\");\n\n_c = WeatherScreen;\n\nfunction updateForecast() {\n  //NOTE city name should be taken as a ui input\n  WeatherService.GetForecast(cityName).then(result => {\n    let forecast = new Forecast(result);\n    console.log(forecast);\n    setForecastData(forecast);\n  }).then(cast => console.dir(cast)).catch(error => console.error(error));\n} //NOTE don't forget to export the function component so it can be imported in another file\n\n\nexport default WeatherScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherScreen\");","map":{"version":3,"sources":["C:/Workspace/HelloReact/React-weather-demo/weather/src/components/WeatherScreen.js"],"names":["WeatherService","Forecast","useState","useEffect","WeatherScreen","initialCity","updateForecast","forecastData","setForecastData","cityName","setCityName","country","city","condition","min","max","feel","windSpeed","visibility","GetForecast","then","result","forecast","console","log","cast","dir","catch","error"],"mappings":";;;AAAA,OAAOA,cAAP,MAA2B,mCAA3B;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;;AAEA,SAASC,aAAT,GAA8C;AAAA;;AAAA,MAAvBC,WAAuB,uEAAT,OAAS;AAC1CF,EAAAA,SAAS,CAAC,MAAI;AACV;AACAG,IAAAA,cAAc;AACjB,GAHQ,CAAT,CAD0C,CAM1C;AACA;;AACA,MAAI,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAA9C;AACA,MAAI,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAACG,WAAD,CAAtC;AAEA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,OAAO,EAAEC,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,iBAAIC,YAAY,CAACI,OAAjB,OAA2BJ,YAAY,CAACK,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAA,gBAAIL,YAAY,CAACM;AAAjB;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAA,0BAASN,YAAY,CAACO,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI;AAAA,0BAASP,YAAY,CAACQ,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eAOI;AAAA,iCAAgBR,YAAY,CAACS,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,eAQI;AAAA,iCAAgBT,YAAY,CAACU,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,eASI;AAAA,iCAAgBV,YAAY,CAACW,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA,kBADJ;AAaH;;GAxBQd,a;;KAAAA,a;;AA0BT,SAASE,cAAT,GAA0B;AACtB;AACAN,EAAAA,cAAc,CAACmB,WAAf,CAA2BV,QAA3B,EACKW,IADL,CACWC,MAAM,IAAI;AACb,QAAIC,QAAQ,GAAG,IAAIrB,QAAJ,CAAaoB,MAAb,CAAf;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAd,IAAAA,eAAe,CAACc,QAAD,CAAf;AACH,GALL,EAMKF,IANL,CAMWK,IAAI,IAAIF,OAAO,CAACG,GAAR,CAAYD,IAAZ,CANnB,EAOKE,KAPL,CAOYC,KAAK,IAAIL,OAAO,CAACK,KAAR,CAAcA,KAAd,CAPrB;AAQH,C,CAED;;;AACA,eAAexB,aAAf","sourcesContent":["import WeatherService from \"../services/OpenWeatherMapService\";\r\nimport Forecast from \"../models/Forecast\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction WeatherScreen(initialCity = \"Sibiu\") {\r\n    useEffect(()=>{\r\n        //NOTE this effect is executed on page load\r\n        updateForecast();\r\n    })\r\n\r\n    //NOTE forecastData is a state\r\n    //NOTE setForecastData is a state upade function\r\n    let [forecastData, setForecastData] = useState({});\r\n    let [cityName, setCityName] = useState(initialCity);\r\n\r\n    return (\r\n        <>\r\n            <h3>Weather report</h3>\r\n            <button onClick={updateForecast}>Update</button>\r\n            <p>{forecastData.country} {forecastData.city}</p>\r\n            <p>{forecastData.condition}</p>\r\n            <p>Min: {forecastData.min}</p>\r\n            <p>Max: {forecastData.max}</p>\r\n            <p>Feels like: {forecastData.feel}</p>\r\n            <p>Wind speed: {forecastData.windSpeed}</p>\r\n            <p>Visibility: {forecastData.visibility}</p>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction updateForecast() {\r\n    //NOTE city name should be taken as a ui input\r\n    WeatherService.GetForecast(cityName)\r\n        .then( result => {\r\n            let forecast = new Forecast(result)\r\n            console.log(forecast)\r\n            setForecastData(forecast)\r\n        })\r\n        .then( cast => console.dir(cast))\r\n        .catch( error => console.error(error) );            \r\n}\r\n\r\n//NOTE don't forget to export the function component so it can be imported in another file\r\nexport default WeatherScreen;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}